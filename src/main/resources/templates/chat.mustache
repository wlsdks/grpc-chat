<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Room</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f7f7f7;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .chat-container {
            width: 60%;
            background-color: #ffffff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
        }

        #chat {
            width: 100%;
            height: 300px;
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow-y: scroll;
            padding: 10px;
            background-color: #f9f9f9;
            margin-bottom: 15px;
        }

        #chat-message {
            width: calc(100% - 90px);
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-right: 10px;
        }

        button {
            padding: 10px 15px;
            background-color: #28a745;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #218838;
        }
    </style>
</head>
<body>
<div class="chat-container">
    <h1>Welcome to {{roomId}} chat room, {{user}}!</h1>
    <div id="chat"></div>
    <input type="text" id="chat-message" placeholder="Type your message here">
    <button onclick="sendMessage()">Send</button>
</div>

<script>
    // 채팅 메시지 수신
    const eventSource = new EventSource('/chat/stream/{{roomId}}');
    const chatContainer = document.getElementById('chat');

    // 이전 채팅 기록 로드
    fetch(`/chat/history/{{roomId}}`)
            .then(response => response.json())
            .then(data => {
                data.forEach(message => {
                    const newMessage = document.createElement('div');
                    newMessage.textContent = `${message.memberEntity.name}: ${message.message}`;
                    chatContainer.appendChild(newMessage);
                });
                chatContainer.scrollTop = chatContainer.scrollHeight;
            });

    // 서버로부터 메시지 수신
    eventSource.onmessage = function(event) {
        console.log("Received event:", event);
        const newMessage = document.createElement('div');
        newMessage.textContent = event.data;
        chatContainer.appendChild(newMessage);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    };

    // 메시지 전송
    function sendMessage() {
        const message = document.getElementById('chat-message').value;
        if (message.trim() === "") return;
        fetch('/chat/send/{{roomId}}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `user={{user}}&message=${message}`
        }).then(response => {
            if (!response.ok) {
                console.error("Failed to send message:", response.statusText);
            }
        }).catch(error => console.error("Error sending message:", error));
        document.getElementById('chat-message').value = '';
    }
</script>
</body>
</html>
